<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.eatit.mapper.warehouseMapper">
  	<!--창고 정보 리스트 조회 -->
  	<select id="getWarehouseListAll" resultType="WarehouseVO">
  		SELECT * FROM warehouse
  	</select>
  	
  	<!--회원 정보 리스트 조회 -->
  	<select id="getMemberListAll" resultType="com.eatit.memberDomain.MemberVO">
  		SELECT * FROM member
  	</select>
  	
  	<!--직책 정보 가져오기(Ajax)-->
	<select id="getPositionName" resultType="String">
		SELECT position_name
		FROM member
		GROUP BY position_name
	</select>
	
	<!--직책에 해당하는 회원이름 리스트 가져오기(Ajax)-->
	<select id="getMembersOfPosition" resultType="String">
		SELECT 
			name 
		FROM member 
		WHERE position_name =#{position_name}
	</select>
	
	<!--이름에 해당하는 회원정보 리스트 가져오기(Ajax)-->
	<select id="getMemberInfoByName" resultType="com.eatit.memberDomain.MemberVO">
		SELECT 
			name, 
			contact, 
			email 
		FROM member 
		WHERE name =#{name}
	</select>
	  	
  	<!--창고 정보 리스트 조회(main) -->
  	<select id="getWarehouseMainList" resultType="WarehouseVO">
  		SELECT 
  			warehouse_no,
  			location_name,
  			warehouse_name,
  			category,
  			w.admin_no,
  			m.name,
  			use_status 
		FROM warehouse w JOIN member m
		ON w.admin_no=m.employee_no
		ORDER BY warehouse_no asc
  	</select>
  	
  	<!--특정 창고 정보 조회(Ajax)-->
  	<select id="getWarehouseInfo" resultType="WarehouseVO">
  		SELECT 
  			warehouse_no, 
  			location_name, 
  			warehouse_name, 
  			category, 
  			admin_no, 
  			use_status, 
  			note, 
  			updater, 
  			updatedate, 
  			name, 
  			contact, 
  			email  
  		FROM warehouse w join member m
  		ON w.admin_no = m.employee_no
  		WHERE warehouse_no = #{warehouse_no}
  	</select>
  	
  	<!--세션 아이디에 해당하는 회원정보-->
  	<select id="getWarehouseAdminInfo" resultType="com.eatit.memberDomain.MemberVO">
  		SELECT 
  			employee_no, 
  			name, 
  			contact, 
  			email 
		FROM member 
		WHERE employee_no = #{no} 
  	</select>
  	
  	<!--창고 등록-->
  	<insert id="insertWarehouse" >
  		INSERT INTO warehouse(location_name,warehouse_name,category,admin_no,note) 
  		VALUES(#{location_name},#{warehouse_name},#{category},#{admin_no},#{note})
  	</insert>
  	
  	<!--창고 수정-->
  	<update id="updateDetailInfo">
  	<![CDATA[
  		UPDATE warehouse 
  		SET 
  			category=#{category},
  			warehouse_name=#{warehouse_name},
  			note=#{note},
  			updater=(SELECT name 
  					 FROM member 
  					 WHERE employee_no = #{admin_no}), 
			updatedate=now(),
  			admin_no=(SELECT employee_no 
  					  FROM member 
  					  WHERE name = #{name})  
  		WHERE warehouse_no = #{warehouse_no}
  	]]>
  	</update>
  	
  	<!--창고 삭제-->
  	<delete id="deleteWarehouse" parameterType="java.util.Map">
  		DELETE FROM warehouse WHERE warehouse_no IN
  		 <foreach collection="warehouse_no" item="no" open="(" separator="," close=")">
            #{no}
        </foreach>
  	</delete>
  	
  	<!-- 완제품 재고 정보 조회 -->
  	<select id="getStockOfFinishedProduct" resultType="com.eatit.warehouseDomain.StockInfoVO">
  	 <![CDATA[
            SELECT 
            	history_no,
            	mi.code,
            	mi.company_no,
            	ph.warehouse_no,
            	mi.category,
            	mi.name,
            	products 'io_quantities',
            	mi.unit,
                (mi.price * products)/10000 'price',
                ph.EXPiry_date 'expiry_date',
                ph.date_of_manufacture 'io_date'  
            FROM production_history ph  
            JOIN masterdata_information mi ON ph.product_no = mi.product_no  
            JOIN warehouse w ON ph.warehouse_no = w.warehouse_no
        ]]>
  	</select>
  	
  	<!-- 자재 재고 정보 조회 -->
  	<select id="getStockOfMaterial" resultType="com.eatit.warehouseDomain.StockInfoVO">
  	 <![CDATA[
            SELECT 
            	materialadd_no 'history_no',
            	mi.code,
            	mi.company_no,
            	ma.warehouse_no,
            	mi.category,
            	mi.name,
            	quantity 'io_quantities' ,
            	mi.unit,
				(mi.price*quantity)/10000 'price',
				ma.expiry_date,
				ma.materialadd_date 'io_date'  
			FROM materialadd ma 
			JOIN masterdata_information mi ON ma.product_no = mi.product_no 
			JOIN warehouse w ON ma.warehouse_no = w.warehouse_no
        ]]>
  	</select>
  	
  	<select id="totalCount" resultType="int">
	  		SELECT COUNT(*)
	  		FROM member
  	</select>
  	
  	<!-- 검색된 주문 개수 -->
   <select id="findCount" resultType="int" parameterType="map">
	 	SELECT COUNT(*) 
	 	FROM stock_info
	 	WHERE
		<choose>
		  <when test = "filter == '대기중'"> status = '대기중' </when>
		  <when test = "filter == '승인'"> status = '승인' </when>
		  <when test = "filter == '취소'"> status = '취소' </when>
		  <when test = "filter == '입고'"> io_classification = '입고' </when>
		  <when test = "filter == '출고'"> io_classification = '출고' </when>
		  <when test = "filter == '자재'"> category = '자재' </when>
		  <when test = "filter == '완제품'"> category = '완제품' </when>
	  	</choose>		  		  		
		AND (
				identify_code LIKE CONCAT('%', #{searchword}, '%') 
				OR io_classification LIKE CONCAT('%', #{searchword}, '%') 
				OR category LIKE CONCAT('%', #{searchword}, '%')
			)
   </select>
	  
  <!-- 검색 내역 조회 -->
  <select id="findOrderList" resultType="ordersVO" parameterType="map">
		SELECT 
			identify_code,
  			warehouse_no,
  			io_classification,
  			category,
  			product_name 'name',
  			io_quantities,
  			product_unit 'unit',
  			price,
  			expiry_date,
  			io_date,
  			status 
		FROM stock_info
		WHERE
		<choose>
		  <when test = "filter == '대기중'"> status = '대기중' </when>
		  <when test = "filter == '승인'"> status = '승인' </when>
		  <when test = "filter == '취소'"> status = '취소' </when>
		  <when test = "filter == '입고'"> io_classification = '입고' </when>
		  <when test = "filter == '출고'"> io_classification = '출고' </when>
		  <when test = "filter == '자재'"> category = '자재' </when>
		  <when test = "filter == '완제품'"> category = '완제품' </when>
	  	</choose>	  		 		
		AND(
			identify_code LIKE CONCAT('%', #{searchword}, '%')
			OR io_classification LIKE CONCAT('%', #{searchword}, '%')
		 	OR category LIKE CONCAT('%', #{searchword}, '%')
			)
		ORDER BY io_date 
		LIMIT #{cri.startPage}, #{cri.pageSize}
	</select>
	  
  	
  	<!-- stock_Info 테이블 조회 -->
  	<select id="getStockInfo" resultType="com.eatit.warehouseDomain.StockInfoVO">
  		SELECT  
  			identify_code,
  			warehouse_no,
  			io_classification,
  			category,
  			product_name 'name',
  			io_quantities,
  			product_unit 'unit',
  			price,
  			expiry_date,
  			io_date,
  			status 
  		FROM stock_info
  		LIMIT #{startPage},#{pageSize}
  	</select>
  	
  	<!-- 특정 품목 stock_info 테이블 조회  -->
  	<select id="getStockInfoByIdentifyCode" resultType="com.eatit.warehouseDomain.StockInfoVO">
  		SELECT  
  			identify_code,
  			warehouse_no,
  			io_classification,
  			category,
  			product_name 'name',
  			io_quantities,
  			product_unit 'unit',
  			price,
  			expiry_date,
  			io_date,
  			status 
  		FROM stock_info
  		WHERE identify_code = #{identify_code}
  	</select>
  	
<!-- 특정 식별 코드로 재고 정보 조회 -->
<select id="getStockInfoByIdentifyCode2" parameterType="java.util.Map" resultType="com.eatit.warehouseDomain.StockInfoVO">
  <!-- 특정 식별 코드(들)에 해당하는 재고 정보를 stock_info 테이블에서 검색합니다. -->
  <!-- 이 쿼리는 여러 개의 식별 코드를 입력받아 해당하는 모든 재고 정보를 반환합니다. -->
  SELECT  
    identify_code,
    warehouse_no,
    io_classification,
    category,
    product_name 'name',
    io_quantities,
    product_unit 'unit',
    price,
    expiry_date,
    io_date,
    status 
  FROM stock_info
  WHERE identify_code IN
    <foreach collection="identifyCode" item="code" open="(" separator="," close=")">
      #{code}
    </foreach>
</select>

<!-- 특정 식별 코드의 개수를 세는 쿼리 -->
<select id="countIdentifyCode" resultType="int">
  <!-- stock_info 테이블에서 주어진 식별 코드에 해당하는 레코드의 수를 반환합니다. -->
  SELECT COUNT(*) 
  FROM stock_info 
  WHERE identify_code = #{identifyCode}
</select>

<!-- 재고 정보를 stock_info 테이블에 추가하는 쿼리 -->
<insert id="insertStockInfo">
  <!-- 주어진 정보를 사용하여 stock_info 테이블에 새로운 레코드를 삽입합니다. -->
  INSERT INTO stock_info(identify_code,warehouse_no,io_classification,category,product_name,io_quantities,product_unit,price,expiry_date,io_date)
  VALUES(#{identify_code},#{warehouse_no},#{io_classification},#{category},#{name},#{io_quantities},#{unit},#{price},#{expiry_date},#{io_date})
</insert>

<!-- 특정 제품 코드에 해당하는 재고의 개수를 세는 쿼리 -->
<select id="countStock1" parameterType="java.util.Map" resultType="int">
  <!-- stock 테이블에서 주어진 제품 코드(들)에 해당하는 레코드의 수를 반환합니다. -->
  SELECT COUNT(*) 
  FROM stock
  WHERE product_code IN
    <foreach collection="productCode" item="code" open="(" separator="," close=")">
      #{code}
    </foreach>
</select>

<!-- 특정 제품 코드에 해당하는 재고의 개수를 세는 쿼리 -->
<select id="countStock" resultType="int">
  <!-- stock 테이블에서 주어진 제품 코드에 해당하는 레코드의 수를 반환합니다. -->
  SELECT COUNT(*) 
  FROM stock
  WHERE product_code = #{code}
</select>

<!-- stock 테이블의 모든 재고 목록을 조회하는 쿼리 -->
<select id="getStockList" resultType="com.eatit.warehouseDomain.StockVO">
  <!-- 재고 목록을 유통 기한(expiry_date) 순서로 반환합니다. -->
  SELECT * 
  FROM stock
  ORDER BY expiry_date;
</select>

<!-- stock 테이블에 새 재고 정보를 추가하는 쿼리 -->
<insert id="insertStock">
  <!-- 주어진 정보를 사용하여 stock 테이블에 새로운 레코드를 삽입합니다. -->
  INSERT INTO stock(product_code,warehouse_no,category,product_name,product_unit,expiry_date,quantity) 
  VALUES(#{product_code},#{warehouse_no},#{category},#{product_name},#{product_unit},#{expiry_date},#{quantity})
</insert> 

<!-- 승인 성공 시 stock_info 테이블의 상태를 '승인'으로 업데이트하는 쿼리 -->
<update id="updateStockInfoStatusWhenApprovalSuccess">
  UPDATE stock_info 
  SET status ='승인' 
  WHERE identify_code = #{identify_code}  
</update>

<!-- 취소 시 stock_info 테이블의 상태를 '취소'로 업데이트하는 쿼리 -->
<update id="updateStockInfoStatusWhencancel" parameterType="java.util.Map">
  UPDATE stock_info 
  SET status ='취소' 
  WHERE identify_code IN
    <foreach collection="identifyCode" item="code" open="(" separator="," close=")">
      #{code}
    </foreach>
</update>

<!-- 특정 창고 번호로 창고 사용 상태를 조회하는 쿼리 -->
<select id="getwarehouseUseStatusByWarehouseNO" resultType="String">
  SELECT use_status
  FROM warehouse
  WHERE warehouse_no =#{warehouse_no}
</select>

<!-- 창고 사용 상태를 업데이트하는 쿼리 -->
<update id="updateWarehouseUseStatus" parameterType="com.eatit.warehouseDomain.StockVO">
  UPDATE warehouse 
  SET use_status = 'Y'  
  WHERE warehouse_no =#{warehouse_no}
</update>

  	
  	
  </mapper>	  
  